apply plugin: 'com.android.application'

android {
    compileSdkVersion ScompileSdkVersion as int
//    compileSdkVersion rootProject.ext.versions.compileSdkVersion
    defaultConfig {
        applicationId "com.lisn.example"

        minSdkVersion SminSdkVersion as int
        targetSdkVersion StargetSdkVersion as int
        versionCode SversionCode as int
        versionName SversionName

//        minSdkVersion rootProject.ext.versions.minSdkVersion
//        targetSdkVersion rootProject.ext.versions.targetSdkVersion
//        versionCode rootProject.ext.versions.versionCode
//        versionName rootProject.ext.versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    def listSubFile = {
        def resFolder = 'src/main/res/layouts'
        def files = file(resFolder).listFiles()
        def folders = []
        files.each {
            item -> folders.add(item.absolutePath)
        }
        folders.add(file(resFolder).parentFile.absolutePath)//先保证分包
        return folders
    }

    sourceSets {
        main {
            res.srcDirs = listSubFile()
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'androidx.appcompat:appcompat:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "com.jakewharton:butterknife:${butterknife_version}"
    annotationProcessor "com.jakewharton:butterknife:${butterknife_version}"
    implementation "com.jakewharton:butterknife-compiler:${butterknife_version}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterknife_version}"
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //通用依赖模块，所有业务模块都会引入
    implementation project(':base:common')
    //这里会引用业务层的module
    if (isModule.toBoolean()) {
        implementation project(":module:activity_chart")
        implementation project(":module:fragment_test")
        implementation project(":module:fragment_home")
        implementation project(":module:fragment_mine")
        implementation project(":module:fragment_test2")
    }
}
